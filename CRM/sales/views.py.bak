import re

from django.shortcuts import render, redirect, HttpResponse
from django import forms
from django.core.exceptions import ValidationError
from django.db.models import Q

from sales import models
from sales.utils.hashlib_func import set_pwd
from sales.utils.paging import PageInfo


# Create your views here.

def mobile_validate(value):
    """
    手机号校验规则
    :param value:
    :return:
    """
    mobile_re = re.compile(r'^(13[0-9]|15[0123456789]|17[678]|18[0-9]|14[57])[0-9]{8}$')
    if not mobile_re.match(value):
        raise ValidationError('手机号码格式错误')


# 登录
def login(request):
    if request.method == "GET":
        return render(request, 'login.html')
    else:
        username = request.POST.get('username')
        password = request.POST.get('password')
        user_obj = models.UserInfo.objects.filter(username=username, password=set_pwd(password)).first()
        if user_obj:
            return redirect('customers')
        else:
            return render(request, 'login.html', {'error': '用户名或者密码错误'})


# 注册Form组件
class RegisterForm(forms.Form):
    username = forms.CharField(
        max_length=16,
        min_length=4,
        label='用户名',
        widget=forms.widgets.TextInput(attrs={'class': 'username', 'autocomplete': 'off', 'placeholder': "您的用户名"}),
        error_messages={
            'required': '用户名不能为空',
            'max_length': '用户名不能超过32位',
            'min_length': '用户名不能小于6位'
        }
    )

    password = forms.CharField(
        max_length=16,
        min_length=4,
        label='密码',
        widget=forms.widgets.PasswordInput(
            attrs={'class': 'password', "placeholder": "输入密码", "oncontextmenu": "return false",
                   "onpaste": "return false"}),
        error_messages={
            'required': '密码不能为空',
            'max_length': '密码不能超过32位',
            'min_length': '密码不能小于6位'
        }
    )

    confirm_password = forms.CharField(
        label='确认密码',
        widget=forms.widgets.PasswordInput(attrs={'class': 'password', "placeholder": "再次输入密码",
                                                  "oncontextmenu": "return false", "onpaste": "return false"}),
        error_messages={
            'required': '确认密码不能为空',
        }
    )

    email = forms.EmailField(
        label="邮箱",
        error_messages={
            'required': '邮箱不能为空',
            'invalid': '邮箱格式不对'
        },
        widget=forms.widgets.TextInput(attrs={'class': 'email', "placeholder": "输入邮箱地址",
                                              "oncontextmenu": "return false", "onpaste": "return false",
                                              "autocomplete": "off"}),
        # validators=[]
    )

    telephone = forms.CharField(
        label="手机号码",
        error_messages={
            'required': '手机号码不能为空'
        },
        validators=[mobile_validate, ],
        widget=forms.widgets.TextInput(attrs={'class': 'phone_number', "placeholder": "输入手机号码",
                                              "oncontextmenu": "return false", "onpaste": "return false",
                                              "autocomplete": "off"}),

    )

    def clean(self):
        values = self.cleaned_data
        password = values.get('password')
        confirm_password = values.get('confirm_password')

        if password == confirm_password:
            return values
        else:
            self.add_error('confirm_password', '两次输入的密码不一致')


# 注册功能
def register(request):
    """
    注册功能
    :param request:
    :return:
    """
    if request.method == "GET":
        register_form_obj = RegisterForm()
        return render(request, 'register.html', {'register_form_obj': register_form_obj})
    else:
        register_form_obj = RegisterForm(request.POST)
        # 基于form的数据校验
        if register_form_obj.is_valid():
            print(register_form_obj.cleaned_data)
            register_form_obj.cleaned_data.pop('confirm_password')
            password = register_form_obj.cleaned_data.pop('password')
            password = set_pwd(password)
            register_form_obj.cleaned_data.update({'password': password})
            models.UserInfo.objects.create(
                **register_form_obj.cleaned_data
            )
            return redirect('login')
        else:
            return render(request, 'register.html', {'register_form_obj': register_form_obj})


# 首页
def home(request):
    return render(request, 'saleshtml/home.html')


# 顾客
def customers(request):

    get_data = request.GET.copy()   # 获取get请求提交的数据

    # 当前页
    current_page = request.GET.get('page')  # 当前页码
    kw = request.GET.get('kw')  # 查询关键字
    search_field = request.GET.get('search_field')
    if kw:
        # customer_list = models.Customer.objects.filter(Q(qq__contains=kw) | Q(name__contains=kw) | Q(status__contains=kw))
        q_obj = Q()
        # q_obj.connector = 'or'  # 指定Q查询的连接符
        q_obj.children.append((search_field, kw))
        customer_list = models.Customer.objects.filter(q_obj)
    else:
        customer_list = models.Customer.objects.all()

    try:
        current_page = int(current_page)

    except Exception as e:
        current_page = 1

    # 每页显示的个数
    per_page = 15

    start_show = (current_page - 1) * per_page
    end_show = current_page * per_page
    # 每页显示的数据
    customers_obj = customer_list.reverse()[start_show: end_show]
    all_count = customer_list.count()
    page_info = PageInfo(current_page=current_page, all_count=all_count, per_page=per_page, get_data=get_data, base_url='/customers/',
                         show_page=5)
    return render(request, 'saleshtml/customers.html', {'customers_obj': customers_obj, 'page_info': page_info})


class CustomerForm(forms.ModelForm):

    class Meta:
        model = models.Customer
        fields = '__all__'

        error_message = {
            'qq': {'required': '不能为空'},
            'course': {'required': '不能为空'},
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        from multiselectfield.forms.fields import MultiSelectFormField
        for field_name, field in self.fields.items():
            if not isinstance(field, MultiSelectFormField):
                field.widget.attrs.update({'class': 'form-control'})
            # else:
            #     field.widget.attrs.update({'type': 'none'})


# def add_customers(request):
#     """
#     增加客户信息页面
#     :param request:
#     :return:
#     """
#     if request.method == "GET":
#         customer_form = CustomerForm()
#         return render(request, 'saleshtml/add_customers.html', {'customer_form':customer_form})
#
#     else:
#         customer_form = CustomerForm(request.POST)
#         if customer_form.is_valid():
#             customer_form.save()
#             return redirect('customers')
#         else:
#             return render(request, 'saleshtml/add_customers.html', {'customer_form':customer_form})
#
#
# def edit_customers(request, cid):
#     """
#     编辑客户信息页面
#     :param request:
#     :param cid:
#     :return:
#     """
#
#     customer_obj = models.Customer.objects.filter(pk=cid).first()
#     if request.method == 'GET':
#         customer_form = CustomerForm(instance=customer_obj)
#         return render(request, 'saleshtml/edit_customers.html', {'customer_form': customer_form})
#
#     else:
#         customer_form = CustomerForm(request.POST, instance=customer_obj)
#         if customer_form.is_valid():
#             customer_form.save()
#             return redirect('customers')
#         else:
#             return render(request, 'saleshtml/edit_customers.html', {'customer_form': customer_form})


# 添加和编辑客户
def add_edit_customers(request, cid=None):
    """
    添加和编辑客户
    :param request:
    :return:
    """
    label = "编辑页面" if cid else "添加页面"
    customer_obj = models.Customer.objects.filter(pk=cid).first()
    if request.method == 'GET':
        customer_form = CustomerForm(instance=customer_obj)
        return render(request, 'saleshtml/edit_customers.html', {'customer_form': customer_form, 'label': label})

    else:
        customer_form = CustomerForm(request.POST, instance=customer_obj)
        if customer_form.is_valid():
            customer_form.save()
            return redirect('customers')
        else:
            return render(request, 'saleshtml/edit_customers.html', {'customer_form': customer_form, 'label': label})

